import { fetchAlerts, updateAlertStatus } from "@/database/database";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { format, parseISO } from "date-fns";
import * as BackgroundFetch from "expo-background-fetch";
import * as TaskManager from "expo-task-manager";
import { Platform } from "react-native";
import { sendOverdueNotification } from "./notifications";

// Nome da tarefa - deve ser √∫nico
const BACKGROUND_SYNC_TASK = "background-alert-sync";

// Fun√ß√£o que verifica e atualiza alertas vencidos
export const checkAndUpdateOverdueAlerts = async (userId?: string) => {
  try {
    console.log("üîÑ Iniciando verifica√ß√£o de alertas vencidos...");

    if (!userId) {
      console.log("‚ùå UserId n√£o fornecido para verifica√ß√£o");
      return { success: false, message: "UserId n√£o fornecido" };
    }

    // Busca todos os alertas do usu√°rio
    const alerts = await fetchAlerts(userId);
    console.log(`üìä Encontrados ${alerts.length} alertas para verificar`);

    // Filtra alertas que podem estar vencidos
    const potentialOverdueAlerts = alerts.filter((alert) => {
      return alert.scheduledAt && alert.status === "pending";
    });

    console.log(
      `‚è∞ ${potentialOverdueAlerts.length} alertas pendentes com hor√°rio agendado`
    );

    // Verifica quais est√£o realmente vencidos
    const overdueAlerts = potentialOverdueAlerts.filter((alert) => {
      // Trata o scheduledAt como hor√°rio local (mesmo que no hook)
      const scheduledAtWithoutZ = alert.scheduledAt!.replace("Z", "");
      const scheduledAtLocal = parseISO(scheduledAtWithoutZ);
      const scheduledAtLocalISO = format(
        scheduledAtLocal,
        "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
      );

      // Hora atual local
      const nowLocal = new Date();
      const nowLocalISO = format(nowLocal, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");

      const isOverdue = nowLocalISO > scheduledAtLocalISO;

      if (isOverdue) {
        console.log(
          `‚ö†Ô∏è Alerta vencido encontrado: ${alert.title} (${alert.id})`
        );
      }

      return isOverdue;
    });

    // Atualiza os alertas vencidos
    if (overdueAlerts.length > 0) {
      console.log(
        `ÔøΩÔøΩ Atualizando ${overdueAlerts.length} alertas para 'overdue'`
      );

      await Promise.all(
        overdueAlerts.map((alert) => updateAlertStatus(alert.id, "overdue"))
      );

      // NOVO: Enviar notifica√ß√£o
      await sendOverdueNotification(overdueAlerts.length);

      console.log("‚úÖ Alertas atualizados com sucesso!");
      return {
        success: true,
        message: `${overdueAlerts.length} alertas atualizados para vencidos`,
        updatedCount: overdueAlerts.length,
      };
    } else {
      console.log("‚úÖ Nenhum alerta vencido encontrado");
      return {
        success: true,
        message: "Nenhum alerta vencido encontrado",
        updatedCount: 0,
      };
    }
  } catch (error) {
    console.error("‚ùå Erro na verifica√ß√£o de alertas vencidos:", error);
    return {
      success: false,
      message: `Erro: ${error}`,
      updatedCount: 0,
    };
  }
};

// Definir a tarefa em background
TaskManager.defineTask(BACKGROUND_SYNC_TASK, async () => {
  try {
    console.log("üöÄ Tarefa de background iniciada");

    // Aqui voc√™ precisa obter o userId do usu√°rio logado
    // Vamos criar uma fun√ß√£o para isso
    const userId = await getCurrentUserId();

    if (!userId) {
      console.log("‚ùå Nenhum usu√°rio logado para sincroniza√ß√£o");
      return BackgroundFetch.BackgroundFetchResult.Failed;
    }

    const result = await checkAndUpdateOverdueAlerts(userId);

    if (result.success) {
      console.log("‚úÖ Sincroniza√ß√£o em background conclu√≠da com sucesso");
      return BackgroundFetch.BackgroundFetchResult.NewData;
    } else {
      console.log("‚ö†Ô∏è Sincroniza√ß√£o em background falhou");
      return BackgroundFetch.BackgroundFetchResult.Failed;
    }
  } catch (error) {
    console.error("‚ùå Erro na tarefa de background:", error);
    return BackgroundFetch.BackgroundFetchResult.Failed;
  }
});

const getCurrentUserId = async (): Promise<string | null> => {
  try {
    const userId = await AsyncStorage.getItem("currentUserId");
    if (userId) {
      console.log(`üë§ UserId encontrado para sync: ${userId}`);
      return userId;
    }
    console.log("‚ùå Nenhum userId encontrado no storage");
    return null;
  } catch (error) {
    console.error("Erro ao obter userId atual:", error);
    return null;
  }
};

// Fun√ß√£o para registrar a tarefa de background
export const registerBackgroundSync = async () => {
  try {
    console.log("üìù Registrando tarefa de background...");

    // Verifica se j√° est√° registrada
    const isRegistered =
      await TaskManager.isTaskRegisteredAsync(BACKGROUND_SYNC_TASK);

    if (isRegistered) {
      console.log("‚úÖ Tarefa j√° estava registrada");
      return;
    }

    // Registra a tarefa com configura√ß√µes otimizadas
    await BackgroundFetch.registerTaskAsync(BACKGROUND_SYNC_TASK, {
      minimumInterval: 15 * 60 * 1000, // 15 minutos (m√≠nimo)
      stopOnTerminate: false,
      startOnBoot: true,
    });

    // NOVO: Configura para execu√ß√£o mais frequente (iOS)
    if (Platform.OS === "ios") {
      await BackgroundFetch.setMinimumIntervalAsync(15 * 60 * 1000);
    }

    console.log("‚úÖ Tarefa de background registrada com sucesso!");
  } catch (error) {
    console.error("‚ùå Erro ao registrar tarefa de background:", error);
  }
};

// Fun√ß√£o para cancelar a tarefa de background
export const unregisterBackgroundSync = async () => {
  try {
    console.log("üóëÔ∏è Cancelando tarefa de background...");

    const isRegistered =
      await TaskManager.isTaskRegisteredAsync(BACKGROUND_SYNC_TASK);

    if (isRegistered) {
      await BackgroundFetch.unregisterTaskAsync(BACKGROUND_SYNC_TASK);
      console.log("‚úÖ Tarefa de background cancelada");
    } else {
      console.log("‚ö†Ô∏è Tarefa n√£o estava registrada");
    }
  } catch (error) {
    console.error("‚ùå Erro ao cancelar tarefa de background:", error);
  }
};

// Fun√ß√£o para verificar status da tarefa
export const getBackgroundSyncStatus = async () => {
  try {
    const isRegistered =
      await TaskManager.isTaskRegisteredAsync(BACKGROUND_SYNC_TASK);
    const status = await BackgroundFetch.getStatusAsync();

    return {
      isRegistered,
      status,
      statusText: getStatusText(status!),
    };
  } catch (error) {
    console.error("Erro ao verificar status:", error);
    return {
      isRegistered: false,
      status: BackgroundFetch.BackgroundFetchStatus.Denied,
      statusText: "Erro",
    };
  }
};

// Fun√ß√£o auxiliar para converter status em texto
const getStatusText = (
  status: BackgroundFetch.BackgroundFetchStatus
): string => {
  switch (status) {
    case BackgroundFetch.BackgroundFetchStatus.Available:
      return "Dispon√≠vel";
    case BackgroundFetch.BackgroundFetchStatus.Denied:
      return "Negado";
    case BackgroundFetch.BackgroundFetchStatus.Restricted:
      return "Restrito";
    default:
      return "Desconhecido";
  }
};
