import { addMinutes, parseISO } from "date-fns";
import * as Notifications from "expo-notifications";
import { Platform } from "react-native";

// ‚úÖ Configura√ß√£o das notifica√ß√µes (mover para c√°)
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowBanner: true,
    shouldShowList: true,
    shouldPlaySound: true, // ‚úÖ Ativei o som para alertas importantes
    shouldSetBadge: false,
  }),
});

// ‚úÖ Fun√ß√£o para solicitar permiss√µes (movida do notifications.ts)
export const requestNotificationPermissions = async (): Promise<boolean> => {
  try {
    console.log("üîî Solicitando permiss√µes de notifica√ß√£o...");

    const { status: existingStatus } =
      await Notifications.getPermissionsAsync();
    console.log("üìã Status atual das permiss√µes:", existingStatus);

    let finalStatus = existingStatus;

    if (existingStatus !== "granted") {
      console.log("‚ùì Solicitando permiss√µes...");
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    if (finalStatus !== "granted") {
      console.log("‚ùå Permiss√£o de notifica√ß√£o negada");
      return false;
    }

    console.log("‚úÖ Permiss√£o de notifica√ß√£o concedida");

    // Configurar canal de notifica√ß√£o (Android)
    if (Platform.OS === "android") {
      await setupAndroidChannel();
    }

    return true;
  } catch (error) {
    console.error("‚ùå Erro ao solicitar permiss√µes:", error);
    return false;
  }
};

// ‚úÖ Configurar canal para Android
const setupAndroidChannel = async () => {
  try {
    await Notifications.setNotificationChannelAsync("alerts", {
      name: "Alertas",
      description: "Notifica√ß√µes de alertas vencidos",
      importance: Notifications.AndroidImportance.HIGH,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: "#FF231F7C",
      sound: "default",
      enableVibrate: true,
      enableLights: true,
      showBadge: true,
    });
    console.log("‚úÖ Canal Android configurado");
  } catch (error) {
    console.error("‚ùå Erro ao configurar canal Android:", error);
  }
};

// ‚úÖ Fun√ß√£o principal para agendar notifica√ß√£o de vencimento
export const scheduleOverdueNotification = async (
  alertId: string,
  alertTitle: string,
  scheduledAt: string
): Promise<string | null> => {
  try {
    console.log(`üìÖ Agendando notifica√ß√£o para alerta: ${alertTitle}`);

    // Verifica permiss√µes
    const { status } = await Notifications.getPermissionsAsync();
    if (status !== "granted") {
      console.log("‚ùå Sem permiss√£o para agendar notifica√ß√£o");
      return null;
    }

    // Converte o hor√°rio como LOCAL
    const scheduledAtWithoutZ = scheduledAt.replace("Z", "");
    const scheduledAtLocal = parseISO(scheduledAtWithoutZ);

    // Verifica se a data √© no futuro
    const now = new Date();
    if (scheduledAtLocal <= now) {
      console.log("‚ö†Ô∏è Hor√°rio agendado j√° passou, n√£o agendando notifica√ß√£o");
      return null;
    }

    const diffMinutes = Math.round(
      (scheduledAtLocal.getTime() - now.getTime()) / (1000 * 60)
    );
    console.log(`‚è≥ Notifica√ß√£o ser√° disparada em ${diffMinutes} minutos`);

    // Agenda notifica√ß√£o para quando o alerta vencer
    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title: "‚ö†Ô∏è Alerta Vencido",
        body: `O alerta "${alertTitle}" venceu e precisa de aten√ß√£o`,
        data: {
          type: "overdue_alert",
          alertId: alertId,
          scheduledFor: scheduledAt,
        },
        sound: "default",
        priority: Notifications.AndroidNotificationPriority.HIGH,
      },
      trigger: {
        type: Notifications.SchedulableTriggerInputTypes.DATE,
        date: scheduledAtLocal,
      },
    });

    console.log(`‚úÖ Notifica√ß√£o agendada com ID: ${notificationId}`);
    return notificationId;
  } catch (error) {
    console.error("‚ùå Erro ao agendar notifica√ß√£o:", error);
    return null;
  }
};

// ‚úÖ Fun√ß√£o para agendar lembrete antes do vencimento
export const scheduleReminderNotification = async (
  alertId: string,
  alertTitle: string,
  scheduledAt: string,
  minutesBefore: number = 15
): Promise<string | null> => {
  try {
    console.log(
      `‚è∞ Agendando lembrete ${minutesBefore}min antes para: ${alertTitle}`
    );

    const { status } = await Notifications.getPermissionsAsync();
    if (status !== "granted") return null;

    const scheduledAtWithoutZ = scheduledAt.replace("Z", "");
    const scheduledAtLocal = parseISO(scheduledAtWithoutZ);
    const reminderTime = addMinutes(scheduledAtLocal, -minutesBefore);

    // S√≥ agenda se o lembrete for no futuro
    const now = new Date();
    if (reminderTime <= now) {
      console.log("‚ö†Ô∏è Hor√°rio do lembrete j√° passou, n√£o agendando");
      return null;
    }

    const diffMinutes = Math.round(
      (reminderTime.getTime() - now.getTime()) / (1000 * 60)
    );
    console.log(`‚è≥ Lembrete ser√° disparado em ${diffMinutes} minutos`);

    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title: "ÔøΩÔøΩ Lembrete de Alerta",
        body: `O alerta "${alertTitle}" vence em ${minutesBefore} minutos`,
        data: {
          type: "reminder_alert",
          alertId: alertId,
          minutesBefore: minutesBefore,
        },
        sound: "default",
      },
      trigger: {
        type: Notifications.SchedulableTriggerInputTypes.DATE,
        date: reminderTime,
      },
    });

    console.log(`‚úÖ Lembrete agendado com ID: ${notificationId}`);
    return notificationId;
  } catch (error) {
    console.error("‚ùå Erro ao agendar lembrete:", error);
    return null;
  }
};

// ‚úÖ Fun√ß√£o para cancelar notifica√ß√£o agendada
export const cancelScheduledNotification = async (notificationId: string) => {
  try {
    await Notifications.cancelScheduledNotificationAsync(notificationId);
    console.log(`üóëÔ∏è Notifica√ß√£o ${notificationId} cancelada`);
  } catch (error) {
    console.error("‚ùå Erro ao cancelar notifica√ß√£o:", error);
  }
};

// ‚úÖ Fun√ß√£o para listar todas as notifica√ß√µes agendadas
export const listScheduledNotifications = async () => {
  try {
    const notifications =
      await Notifications.getAllScheduledNotificationsAsync();
    console.log("ÔøΩÔøΩ Notifica√ß√µes agendadas:", notifications.length);

    // Log detalhado para debug
    notifications.forEach((notification, index) => {
      console.log(`üìã ${index + 1}. ID: ${notification.identifier}`);
      console.log(`   T√≠tulo: ${notification.content.title}`);
      console.log(`   Trigger: ${notification.trigger}`);
    });

    return notifications;
  } catch (error) {
    console.error("‚ùå Erro ao listar notifica√ß√µes:", error);
    return [];
  }
};

// ‚úÖ Fun√ß√£o para cancelar todas as notifica√ß√µes
export const cancelAllNotifications = async () => {
  try {
    await Notifications.cancelAllScheduledNotificationsAsync();
    console.log("üóëÔ∏è Todas as notifica√ß√µes canceladas");
  } catch (error) {
    console.error("‚ùå Erro ao cancelar notifica√ß√µes:", error);
  }
};

// ‚úÖ Fun√ß√£o para testar notifica√ß√£o (√∫til para debug)
export const testNotification = async () => {
  try {
    console.log("üß™ Enviando notifica√ß√£o de teste...");

    const hasPermission = await requestNotificationPermissions();
    if (!hasPermission) {
      console.log("‚ùå Sem permiss√£o para teste");
      return false;
    }

    await Notifications.scheduleNotificationAsync({
      content: {
        title: "üß™ Teste de Notifica√ß√£o",
        body: "Se voc√™ est√° vendo isso, as notifica√ß√µes est√£o funcionando!",
        data: { type: "test" },
        sound: "default",
      },
      trigger: null, // Imediato
    });

    console.log("‚úÖ Notifica√ß√£o de teste enviada");
    return true;
  } catch (error) {
    console.error("‚ùå Erro no teste:", error);
    return false;
  }
};
